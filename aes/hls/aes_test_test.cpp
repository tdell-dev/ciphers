#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "aes.h"

BITE gold_plaintxt  [NUM_DATA_BYTES];
BITE gold_key       [NUM_KEY_BYTES];
BITE gold_cyphertxt [NUM_DATA_BYTES];
BITE test_cyphertxt [NUM_DATA_BYTES];


int main()
{
gold_key[0] = 0x60;
gold_key[1] = 0x3d;
gold_key[2] = 0xeb;
gold_key[3] = 0x10;
gold_key[4] = 0x15;
gold_key[5] = 0xca;
gold_key[6] = 0x71;
gold_key[7] = 0xbe;
gold_key[8] = 0x2b;
gold_key[9] = 0x73;
gold_key[10] = 0xae;
gold_key[11] = 0xf0;
gold_key[12] = 0x85;
gold_key[13] = 0x7d;
gold_key[14] = 0x77;
gold_key[15] = 0x81;
gold_key[16] = 0x1f;
gold_key[17] = 0x35;
gold_key[18] = 0x2c;
gold_key[19] = 0x07;
gold_key[20] = 0x3b;
gold_key[21] = 0x61;
gold_key[22] = 0x08;
gold_key[23] = 0xd7;
gold_key[24] = 0x2d;
gold_key[25] = 0x98;
gold_key[26] = 0x10;
gold_key[27] = 0xa3;
gold_key[28] = 0x09;
gold_key[29] = 0x14;
gold_key[30] = 0xdf;
gold_key[31] = 0xf4;
gold_plaintxt[0] = 0xae;
gold_plaintxt[1] = 0x2d;
gold_plaintxt[2] = 0x8a;
gold_plaintxt[3] = 0x57;
gold_plaintxt[4] = 0x1e;
gold_plaintxt[5] = 0x03;
gold_plaintxt[6] = 0xac;
gold_plaintxt[7] = 0x9c;
gold_plaintxt[8] = 0x9e;
gold_plaintxt[9] = 0xb7;
gold_plaintxt[10] = 0x6f;
gold_plaintxt[11] = 0xac;
gold_plaintxt[12] = 0x45;
gold_plaintxt[13] = 0xaf;
gold_plaintxt[14] = 0x8e;
gold_plaintxt[15] = 0x51;
gold_cyphertxt[0] = 0x59;
gold_cyphertxt[1] = 0x1c;
gold_cyphertxt[2] = 0xcb;
gold_cyphertxt[3] = 0x10;
gold_cyphertxt[4] = 0xd4;
gold_cyphertxt[5] = 0x10;
gold_cyphertxt[6] = 0xed;
gold_cyphertxt[7] = 0x26;
gold_cyphertxt[8] = 0xdc;
gold_cyphertxt[9] = 0x5b;
gold_cyphertxt[10] = 0xa7;
gold_cyphertxt[11] = 0x4a;
gold_cyphertxt[12] = 0x31;
gold_cyphertxt[13] = 0x36;
gold_cyphertxt[14] = 0x28;
gold_cyphertxt[15] = 0x70;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = -1 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0xc4;
gold_key[1] = 0x7b;
gold_key[2] = 0x02;
gold_key[3] = 0x94;
gold_key[4] = 0xdb;
gold_key[5] = 0xbb;
gold_key[6] = 0xee;
gold_key[7] = 0x0f;
gold_key[8] = 0xec;
gold_key[9] = 0x47;
gold_key[10] = 0x57;
gold_key[11] = 0xf2;
gold_key[12] = 0x2f;
gold_key[13] = 0xfe;
gold_key[14] = 0xee;
gold_key[15] = 0x35;
gold_key[16] = 0x87;
gold_key[17] = 0xca;
gold_key[18] = 0x47;
gold_key[19] = 0x30;
gold_key[20] = 0xc3;
gold_key[21] = 0xd3;
gold_key[22] = 0x3b;
gold_key[23] = 0x69;
gold_key[24] = 0x1d;
gold_key[25] = 0xf3;
gold_key[26] = 0x8b;
gold_key[27] = 0xab;
gold_key[28] = 0x07;
gold_key[29] = 0x6b;
gold_key[30] = 0xc5;
gold_key[31] = 0x58;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x46;
gold_cyphertxt[1] = 0xf2;
gold_cyphertxt[2] = 0xfb;
gold_cyphertxt[3] = 0x34;
gold_cyphertxt[4] = 0x2d;
gold_cyphertxt[5] = 0x6f;
gold_cyphertxt[6] = 0x0a;
gold_cyphertxt[7] = 0xb4;
gold_cyphertxt[8] = 0x77;
gold_cyphertxt[9] = 0x47;
gold_cyphertxt[10] = 0x6f;
gold_cyphertxt[11] = 0xc5;
gold_cyphertxt[12] = 0x01;
gold_cyphertxt[13] = 0x24;
gold_cyphertxt[14] = 0x2c;
gold_cyphertxt[15] = 0x5f;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 0 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0x28;
gold_key[1] = 0xd4;
gold_key[2] = 0x6c;
gold_key[3] = 0xff;
gold_key[4] = 0xa1;
gold_key[5] = 0x58;
gold_key[6] = 0x53;
gold_key[7] = 0x31;
gold_key[8] = 0x94;
gold_key[9] = 0x21;
gold_key[10] = 0x4a;
gold_key[11] = 0x91;
gold_key[12] = 0xe7;
gold_key[13] = 0x12;
gold_key[14] = 0xfc;
gold_key[15] = 0x2b;
gold_key[16] = 0x45;
gold_key[17] = 0xb5;
gold_key[18] = 0x18;
gold_key[19] = 0x07;
gold_key[20] = 0x66;
gold_key[21] = 0x75;
gold_key[22] = 0xaf;
gold_key[23] = 0xfd;
gold_key[24] = 0x91;
gold_key[25] = 0x0e;
gold_key[26] = 0xde;
gold_key[27] = 0xca;
gold_key[28] = 0x5f;
gold_key[29] = 0x41;
gold_key[30] = 0xac;
gold_key[31] = 0x64;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x4b;
gold_cyphertxt[1] = 0xf3;
gold_cyphertxt[2] = 0xb0;
gold_cyphertxt[3] = 0xa6;
gold_cyphertxt[4] = 0x9a;
gold_cyphertxt[5] = 0xeb;
gold_cyphertxt[6] = 0x66;
gold_cyphertxt[7] = 0x57;
gold_cyphertxt[8] = 0x79;
gold_cyphertxt[9] = 0x4f;
gold_cyphertxt[10] = 0x29;
gold_cyphertxt[11] = 0x01;
gold_cyphertxt[12] = 0xb1;
gold_cyphertxt[13] = 0x44;
gold_cyphertxt[14] = 0x0a;
gold_cyphertxt[15] = 0xd4;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 1 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0xc1;
gold_key[1] = 0xcc;
gold_key[2] = 0x35;
gold_key[3] = 0x8b;
gold_key[4] = 0x44;
gold_key[5] = 0x99;
gold_key[6] = 0x09;
gold_key[7] = 0xa1;
gold_key[8] = 0x94;
gold_key[9] = 0x36;
gold_key[10] = 0xcf;
gold_key[11] = 0xbb;
gold_key[12] = 0x3f;
gold_key[13] = 0x85;
gold_key[14] = 0x2e;
gold_key[15] = 0xf8;
gold_key[16] = 0xbc;
gold_key[17] = 0xb5;
gold_key[18] = 0xed;
gold_key[19] = 0x12;
gold_key[20] = 0xac;
gold_key[21] = 0x70;
gold_key[22] = 0x58;
gold_key[23] = 0x32;
gold_key[24] = 0x5f;
gold_key[25] = 0x56;
gold_key[26] = 0xe6;
gold_key[27] = 0x09;
gold_key[28] = 0x9a;
gold_key[29] = 0xab;
gold_key[30] = 0x1a;
gold_key[31] = 0x1c;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x35;
gold_cyphertxt[1] = 0x20;
gold_cyphertxt[2] = 0x65;
gold_cyphertxt[3] = 0x27;
gold_cyphertxt[4] = 0x21;
gold_cyphertxt[5] = 0x69;
gold_cyphertxt[6] = 0xab;
gold_cyphertxt[7] = 0xf9;
gold_cyphertxt[8] = 0x85;
gold_cyphertxt[9] = 0x68;
gold_cyphertxt[10] = 0x43;
gold_cyphertxt[11] = 0x92;
gold_cyphertxt[12] = 0x7d;
gold_cyphertxt[13] = 0x06;
gold_cyphertxt[14] = 0x74;
gold_cyphertxt[15] = 0xfd;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 2 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0x98;
gold_key[1] = 0x4c;
gold_key[2] = 0xa7;
gold_key[3] = 0x5f;
gold_key[4] = 0x4e;
gold_key[5] = 0xe8;
gold_key[6] = 0xd7;
gold_key[7] = 0x06;
gold_key[8] = 0xf4;
gold_key[9] = 0x6c;
gold_key[10] = 0x2d;
gold_key[11] = 0x98;
gold_key[12] = 0xc0;
gold_key[13] = 0xbf;
gold_key[14] = 0x4a;
gold_key[15] = 0x45;
gold_key[16] = 0xf5;
gold_key[17] = 0xb0;
gold_key[18] = 0x0d;
gold_key[19] = 0x79;
gold_key[20] = 0x1c;
gold_key[21] = 0x2d;
gold_key[22] = 0xfe;
gold_key[23] = 0xb1;
gold_key[24] = 0x91;
gold_key[25] = 0xb5;
gold_key[26] = 0xed;
gold_key[27] = 0x8e;
gold_key[28] = 0x42;
gold_key[29] = 0x0f;
gold_key[30] = 0xd6;
gold_key[31] = 0x27;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x43;
gold_cyphertxt[1] = 0x07;
gold_cyphertxt[2] = 0x45;
gold_cyphertxt[3] = 0x6a;
gold_cyphertxt[4] = 0x9e;
gold_cyphertxt[5] = 0x67;
gold_cyphertxt[6] = 0x81;
gold_cyphertxt[7] = 0x3b;
gold_cyphertxt[8] = 0x45;
gold_cyphertxt[9] = 0x2e;
gold_cyphertxt[10] = 0x15;
gold_cyphertxt[11] = 0xfa;
gold_cyphertxt[12] = 0x8f;
gold_cyphertxt[13] = 0xff;
gold_cyphertxt[14] = 0xe3;
gold_cyphertxt[15] = 0x98;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 3 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0xb4;
gold_key[1] = 0x3d;
gold_key[2] = 0x08;
gold_key[3] = 0xa4;
gold_key[4] = 0x47;
gold_key[5] = 0xac;
gold_key[6] = 0x86;
gold_key[7] = 0x09;
gold_key[8] = 0xba;
gold_key[9] = 0xad;
gold_key[10] = 0xae;
gold_key[11] = 0x4f;
gold_key[12] = 0xf1;
gold_key[13] = 0x29;
gold_key[14] = 0x18;
gold_key[15] = 0xb9;
gold_key[16] = 0xf6;
gold_key[17] = 0x8f;
gold_key[18] = 0xc1;
gold_key[19] = 0x65;
gold_key[20] = 0x3f;
gold_key[21] = 0x12;
gold_key[22] = 0x69;
gold_key[23] = 0x22;
gold_key[24] = 0x2f;
gold_key[25] = 0x12;
gold_key[26] = 0x39;
gold_key[27] = 0x81;
gold_key[28] = 0xde;
gold_key[29] = 0xd7;
gold_key[30] = 0xa9;
gold_key[31] = 0x2f;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x46;
gold_cyphertxt[1] = 0x63;
gold_cyphertxt[2] = 0x44;
gold_cyphertxt[3] = 0x66;
gold_cyphertxt[4] = 0x07;
gold_cyphertxt[5] = 0x35;
gold_cyphertxt[6] = 0x49;
gold_cyphertxt[7] = 0x89;
gold_cyphertxt[8] = 0x47;
gold_cyphertxt[9] = 0x7a;
gold_cyphertxt[10] = 0x5c;
gold_cyphertxt[11] = 0x6f;
gold_cyphertxt[12] = 0x0f;
gold_cyphertxt[13] = 0x00;
gold_cyphertxt[14] = 0x7e;
gold_cyphertxt[15] = 0xf4;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 4 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0x1d;
gold_key[1] = 0x85;
gold_key[2] = 0xa1;
gold_key[3] = 0x81;
gold_key[4] = 0xb5;
gold_key[5] = 0x4c;
gold_key[6] = 0xde;
gold_key[7] = 0x51;
gold_key[8] = 0xf0;
gold_key[9] = 0xe0;
gold_key[10] = 0x98;
gold_key[11] = 0x09;
gold_key[12] = 0x5b;
gold_key[13] = 0x29;
gold_key[14] = 0x62;
gold_key[15] = 0xfd;
gold_key[16] = 0xc9;
gold_key[17] = 0x3b;
gold_key[18] = 0x51;
gold_key[19] = 0xfe;
gold_key[20] = 0x9b;
gold_key[21] = 0x88;
gold_key[22] = 0x60;
gold_key[23] = 0x2b;
gold_key[24] = 0x3f;
gold_key[25] = 0x54;
gold_key[26] = 0x13;
gold_key[27] = 0x0b;
gold_key[28] = 0xf7;
gold_key[29] = 0x6a;
gold_key[30] = 0x5b;
gold_key[31] = 0xd9;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x53;
gold_cyphertxt[1] = 0x1c;
gold_cyphertxt[2] = 0x2c;
gold_cyphertxt[3] = 0x38;
gold_cyphertxt[4] = 0x34;
gold_cyphertxt[5] = 0x45;
gold_cyphertxt[6] = 0x78;
gold_cyphertxt[7] = 0xb8;
gold_cyphertxt[8] = 0x4d;
gold_cyphertxt[9] = 0x50;
gold_cyphertxt[10] = 0xb3;
gold_cyphertxt[11] = 0xc9;
gold_cyphertxt[12] = 0x17;
gold_cyphertxt[13] = 0xbb;
gold_cyphertxt[14] = 0xb6;
gold_cyphertxt[15] = 0xe1;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 5 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0xdc;
gold_key[1] = 0x0e;
gold_key[2] = 0xba;
gold_key[3] = 0x1f;
gold_key[4] = 0x22;
gold_key[5] = 0x32;
gold_key[6] = 0xa7;
gold_key[7] = 0x87;
gold_key[8] = 0x9d;
gold_key[9] = 0xed;
gold_key[10] = 0x34;
gold_key[11] = 0xed;
gold_key[12] = 0x84;
gold_key[13] = 0x28;
gold_key[14] = 0xee;
gold_key[15] = 0xb8;
gold_key[16] = 0x76;
gold_key[17] = 0x9b;
gold_key[18] = 0x05;
gold_key[19] = 0x6b;
gold_key[20] = 0xba;
gold_key[21] = 0xf8;
gold_key[22] = 0xad;
gold_key[23] = 0x77;
gold_key[24] = 0xcb;
gold_key[25] = 0x65;
gold_key[26] = 0xc3;
gold_key[27] = 0x54;
gold_key[28] = 0x14;
gold_key[29] = 0x30;
gold_key[30] = 0xb4;
gold_key[31] = 0xcf;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0xfc;
gold_cyphertxt[1] = 0x6a;
gold_cyphertxt[2] = 0xec;
gold_cyphertxt[3] = 0x90;
gold_cyphertxt[4] = 0x63;
gold_cyphertxt[5] = 0x23;
gold_cyphertxt[6] = 0x48;
gold_cyphertxt[7] = 0x00;
gold_cyphertxt[8] = 0x05;
gold_cyphertxt[9] = 0xc5;
gold_cyphertxt[10] = 0x8e;
gold_cyphertxt[11] = 0x7e;
gold_cyphertxt[12] = 0x1a;
gold_cyphertxt[13] = 0xb0;
gold_cyphertxt[14] = 0x04;
gold_cyphertxt[15] = 0xad;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 6 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0xf8;
gold_key[1] = 0xbe;
gold_key[2] = 0x9b;
gold_key[3] = 0xa6;
gold_key[4] = 0x15;
gold_key[5] = 0xc5;
gold_key[6] = 0xa9;
gold_key[7] = 0x52;
gold_key[8] = 0xca;
gold_key[9] = 0xbb;
gold_key[10] = 0xca;
gold_key[11] = 0x24;
gold_key[12] = 0xf6;
gold_key[13] = 0x8f;
gold_key[14] = 0x85;
gold_key[15] = 0x93;
gold_key[16] = 0x03;
gold_key[17] = 0x96;
gold_key[18] = 0x24;
gold_key[19] = 0xd5;
gold_key[20] = 0x24;
gold_key[21] = 0xc8;
gold_key[22] = 0x16;
gold_key[23] = 0xac;
gold_key[24] = 0xda;
gold_key[25] = 0x2c;
gold_key[26] = 0x91;
gold_key[27] = 0x83;
gold_key[28] = 0xbd;
gold_key[29] = 0x91;
gold_key[30] = 0x7c;
gold_key[31] = 0xb9;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0xa3;
gold_cyphertxt[1] = 0x94;
gold_cyphertxt[2] = 0x4b;
gold_cyphertxt[3] = 0x95;
gold_cyphertxt[4] = 0xca;
gold_cyphertxt[5] = 0x0b;
gold_cyphertxt[6] = 0x52;
gold_cyphertxt[7] = 0x04;
gold_cyphertxt[8] = 0x35;
gold_cyphertxt[9] = 0x84;
gold_cyphertxt[10] = 0xef;
gold_cyphertxt[11] = 0x02;
gold_cyphertxt[12] = 0x15;
gold_cyphertxt[13] = 0x19;
gold_cyphertxt[14] = 0x26;
gold_cyphertxt[15] = 0xa8;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 7 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0x79;
gold_key[1] = 0x7f;
gold_key[2] = 0x8b;
gold_key[3] = 0x3d;
gold_key[4] = 0x17;
gold_key[5] = 0x6d;
gold_key[6] = 0xac;
gold_key[7] = 0x5b;
gold_key[8] = 0x7e;
gold_key[9] = 0x34;
gold_key[10] = 0xa2;
gold_key[11] = 0xd5;
gold_key[12] = 0x39;
gold_key[13] = 0xc4;
gold_key[14] = 0xef;
gold_key[15] = 0x36;
gold_key[16] = 0x7a;
gold_key[17] = 0x16;
gold_key[18] = 0xf8;
gold_key[19] = 0x63;
gold_key[20] = 0x5f;
gold_key[21] = 0x62;
gold_key[22] = 0x64;
gold_key[23] = 0x73;
gold_key[24] = 0x75;
gold_key[25] = 0x91;
gold_key[26] = 0xc5;
gold_key[27] = 0xc0;
gold_key[28] = 0x7b;
gold_key[29] = 0xf5;
gold_key[30] = 0x7a;
gold_key[31] = 0x3e;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0xa7;
gold_cyphertxt[1] = 0x42;
gold_cyphertxt[2] = 0x89;
gold_cyphertxt[3] = 0xfe;
gold_cyphertxt[4] = 0x73;
gold_cyphertxt[5] = 0xa4;
gold_cyphertxt[6] = 0xc1;
gold_cyphertxt[7] = 0x23;
gold_cyphertxt[8] = 0xca;
gold_cyphertxt[9] = 0x18;
gold_cyphertxt[10] = 0x9e;
gold_cyphertxt[11] = 0xa1;
gold_cyphertxt[12] = 0xe1;
gold_cyphertxt[13] = 0xb4;
gold_cyphertxt[14] = 0x9a;
gold_cyphertxt[15] = 0xd5;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 8 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0x68;
gold_key[1] = 0x38;
gold_key[2] = 0xd4;
gold_key[3] = 0x0c;
gold_key[4] = 0xaf;
gold_key[5] = 0x92;
gold_key[6] = 0x77;
gold_key[7] = 0x49;
gold_key[8] = 0xc1;
gold_key[9] = 0x3f;
gold_key[10] = 0x03;
gold_key[11] = 0x29;
gold_key[12] = 0xd3;
gold_key[13] = 0x31;
gold_key[14] = 0xf4;
gold_key[15] = 0x48;
gold_key[16] = 0xe2;
gold_key[17] = 0x02;
gold_key[18] = 0xc7;
gold_key[19] = 0x3e;
gold_key[20] = 0xf5;
gold_key[21] = 0x2c;
gold_key[22] = 0x5f;
gold_key[23] = 0x73;
gold_key[24] = 0xa3;
gold_key[25] = 0x7c;
gold_key[26] = 0xa6;
gold_key[27] = 0x35;
gold_key[28] = 0xd4;
gold_key[29] = 0xc4;
gold_key[30] = 0x77;
gold_key[31] = 0x07;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0xb9;
gold_cyphertxt[1] = 0x1d;
gold_cyphertxt[2] = 0x4e;
gold_cyphertxt[3] = 0xa4;
gold_cyphertxt[4] = 0x48;
gold_cyphertxt[5] = 0x86;
gold_cyphertxt[6] = 0x44;
gold_cyphertxt[7] = 0xb5;
gold_cyphertxt[8] = 0x6c;
gold_cyphertxt[9] = 0xf0;
gold_cyphertxt[10] = 0x81;
gold_cyphertxt[11] = 0x2f;
gold_cyphertxt[12] = 0xa7;
gold_cyphertxt[13] = 0xfc;
gold_cyphertxt[14] = 0xf5;
gold_cyphertxt[15] = 0xfc;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 9 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0xcc;
gold_key[1] = 0xd1;
gold_key[2] = 0xbc;
gold_key[3] = 0x3c;
gold_key[4] = 0x65;
gold_key[5] = 0x9c;
gold_key[6] = 0xd3;
gold_key[7] = 0xc5;
gold_key[8] = 0x9b;
gold_key[9] = 0xc4;
gold_key[10] = 0x37;
gold_key[11] = 0x48;
gold_key[12] = 0x4e;
gold_key[13] = 0x3c;
gold_key[14] = 0x5c;
gold_key[15] = 0x72;
gold_key[16] = 0x44;
gold_key[17] = 0x41;
gold_key[18] = 0xda;
gold_key[19] = 0x8d;
gold_key[20] = 0x6e;
gold_key[21] = 0x90;
gold_key[22] = 0xce;
gold_key[23] = 0x55;
gold_key[24] = 0x6c;
gold_key[25] = 0xd5;
gold_key[26] = 0x7d;
gold_key[27] = 0x07;
gold_key[28] = 0x52;
gold_key[29] = 0x66;
gold_key[30] = 0x3b;
gold_key[31] = 0xbc;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x30;
gold_cyphertxt[1] = 0x4f;
gold_cyphertxt[2] = 0x81;
gold_cyphertxt[3] = 0xab;
gold_cyphertxt[4] = 0x61;
gold_cyphertxt[5] = 0xa8;
gold_cyphertxt[6] = 0x0c;
gold_cyphertxt[7] = 0x2e;
gold_cyphertxt[8] = 0x74;
gold_cyphertxt[9] = 0x3b;
gold_cyphertxt[10] = 0x94;
gold_cyphertxt[11] = 0xd5;
gold_cyphertxt[12] = 0x00;
gold_cyphertxt[13] = 0x2a;
gold_cyphertxt[14] = 0x12;
gold_cyphertxt[15] = 0x6b;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 10 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0x13;
gold_key[1] = 0x42;
gold_key[2] = 0x8b;
gold_key[3] = 0x5e;
gold_key[4] = 0x4c;
gold_key[5] = 0x00;
gold_key[6] = 0x5e;
gold_key[7] = 0x06;
gold_key[8] = 0x36;
gold_key[9] = 0xdd;
gold_key[10] = 0x33;
gold_key[11] = 0x84;
gold_key[12] = 0x05;
gold_key[13] = 0xd1;
gold_key[14] = 0x73;
gold_key[15] = 0xab;
gold_key[16] = 0x13;
gold_key[17] = 0x5d;
gold_key[18] = 0xec;
gold_key[19] = 0x2a;
gold_key[20] = 0x25;
gold_key[21] = 0xc2;
gold_key[22] = 0x2c;
gold_key[23] = 0x5d;
gold_key[24] = 0xf0;
gold_key[25] = 0x72;
gold_key[26] = 0x2d;
gold_key[27] = 0x69;
gold_key[28] = 0xdc;
gold_key[29] = 0xc4;
gold_key[30] = 0x38;
gold_key[31] = 0x87;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x64;
gold_cyphertxt[1] = 0x9a;
gold_cyphertxt[2] = 0x71;
gold_cyphertxt[3] = 0x54;
gold_cyphertxt[4] = 0x53;
gold_cyphertxt[5] = 0x78;
gold_cyphertxt[6] = 0xc7;
gold_cyphertxt[7] = 0x83;
gold_cyphertxt[8] = 0xe3;
gold_cyphertxt[9] = 0x68;
gold_cyphertxt[10] = 0xc9;
gold_cyphertxt[11] = 0xad;
gold_cyphertxt[12] = 0xe7;
gold_cyphertxt[13] = 0x11;
gold_cyphertxt[14] = 0x4f;
gold_cyphertxt[15] = 0x6c;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 11 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0x07;
gold_key[1] = 0xeb;
gold_key[2] = 0x03;
gold_key[3] = 0xa0;
gold_key[4] = 0x8d;
gold_key[5] = 0x29;
gold_key[6] = 0x1d;
gold_key[7] = 0x1b;
gold_key[8] = 0x07;
gold_key[9] = 0x40;
gold_key[10] = 0x8b;
gold_key[11] = 0xf3;
gold_key[12] = 0x51;
gold_key[13] = 0x2a;
gold_key[14] = 0xb4;
gold_key[15] = 0x0c;
gold_key[16] = 0x91;
gold_key[17] = 0x09;
gold_key[18] = 0x7a;
gold_key[19] = 0xc7;
gold_key[20] = 0x74;
gold_key[21] = 0x61;
gold_key[22] = 0xaa;
gold_key[23] = 0xd4;
gold_key[24] = 0xbb;
gold_key[25] = 0x85;
gold_key[26] = 0x96;
gold_key[27] = 0x47;
gold_key[28] = 0xf7;
gold_key[29] = 0x4f;
gold_key[30] = 0x00;
gold_key[31] = 0xee;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x47;
gold_cyphertxt[1] = 0xcb;
gold_cyphertxt[2] = 0x03;
gold_cyphertxt[3] = 0x0d;
gold_cyphertxt[4] = 0xa2;
gold_cyphertxt[5] = 0xab;
gold_cyphertxt[6] = 0x05;
gold_cyphertxt[7] = 0x1d;
gold_cyphertxt[8] = 0xfc;
gold_cyphertxt[9] = 0x6c;
gold_cyphertxt[10] = 0x4b;
gold_cyphertxt[11] = 0xf6;
gold_cyphertxt[12] = 0x91;
gold_cyphertxt[13] = 0x0d;
gold_cyphertxt[14] = 0x12;
gold_cyphertxt[15] = 0xbb;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 12 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0x90;
gold_key[1] = 0x14;
gold_key[2] = 0x3a;
gold_key[3] = 0xe2;
gold_key[4] = 0x0c;
gold_key[5] = 0xd7;
gold_key[6] = 0x8c;
gold_key[7] = 0x5d;
gold_key[8] = 0x8e;
gold_key[9] = 0xbd;
gold_key[10] = 0xd6;
gold_key[11] = 0xcb;
gold_key[12] = 0x9d;
gold_key[13] = 0xc1;
gold_key[14] = 0x76;
gold_key[15] = 0x24;
gold_key[16] = 0x27;
gold_key[17] = 0xa9;
gold_key[18] = 0x6c;
gold_key[19] = 0x78;
gold_key[20] = 0xc6;
gold_key[21] = 0x39;
gold_key[22] = 0xbc;
gold_key[23] = 0xcc;
gold_key[24] = 0x41;
gold_key[25] = 0xa6;
gold_key[26] = 0x14;
gold_key[27] = 0x24;
gold_key[28] = 0x56;
gold_key[29] = 0x4e;
gold_key[30] = 0xaf;
gold_key[31] = 0xe1;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x79;
gold_cyphertxt[1] = 0x8c;
gold_cyphertxt[2] = 0x7c;
gold_cyphertxt[3] = 0x00;
gold_cyphertxt[4] = 0x5d;
gold_cyphertxt[5] = 0xee;
gold_cyphertxt[6] = 0x43;
gold_cyphertxt[7] = 0x2b;
gold_cyphertxt[8] = 0x2c;
gold_cyphertxt[9] = 0x8e;
gold_cyphertxt[10] = 0xa5;
gold_cyphertxt[11] = 0xdf;
gold_cyphertxt[12] = 0xa3;
gold_cyphertxt[13] = 0x81;
gold_cyphertxt[14] = 0xec;
gold_cyphertxt[15] = 0xc3;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 13 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
gold_key[0] = 0xb7;
gold_key[1] = 0xa5;
gold_key[2] = 0x79;
gold_key[3] = 0x4d;
gold_key[4] = 0x52;
gold_key[5] = 0x73;
gold_key[6] = 0x74;
gold_key[7] = 0x75;
gold_key[8] = 0xd5;
gold_key[9] = 0x3d;
gold_key[10] = 0x5a;
gold_key[11] = 0x37;
gold_key[12] = 0x72;
gold_key[13] = 0x00;
gold_key[14] = 0x84;
gold_key[15] = 0x9b;
gold_key[16] = 0xe0;
gold_key[17] = 0x26;
gold_key[18] = 0x0a;
gold_key[19] = 0x67;
gold_key[20] = 0xa2;
gold_key[21] = 0xb2;
gold_key[22] = 0x2c;
gold_key[23] = 0xed;
gold_key[24] = 0x8b;
gold_key[25] = 0xbe;
gold_key[26] = 0xf1;
gold_key[27] = 0x28;
gold_key[28] = 0x82;
gold_key[29] = 0x27;
gold_key[30] = 0x0d;
gold_key[31] = 0x07;
gold_plaintxt[0] = 0x00;
gold_plaintxt[1] = 0x00;
gold_plaintxt[2] = 0x00;
gold_plaintxt[3] = 0x00;
gold_plaintxt[4] = 0x00;
gold_plaintxt[5] = 0x00;
gold_plaintxt[6] = 0x00;
gold_plaintxt[7] = 0x00;
gold_plaintxt[8] = 0x00;
gold_plaintxt[9] = 0x00;
gold_plaintxt[10] = 0x00;
gold_plaintxt[11] = 0x00;
gold_plaintxt[12] = 0x00;
gold_plaintxt[13] = 0x00;
gold_plaintxt[14] = 0x00;
gold_plaintxt[15] = 0x00;
gold_cyphertxt[0] = 0x63;
gold_cyphertxt[1] = 0x7c;
gold_cyphertxt[2] = 0x31;
gold_cyphertxt[3] = 0xdc;
gold_cyphertxt[4] = 0x25;
gold_cyphertxt[5] = 0x91;
gold_cyphertxt[6] = 0xa0;
gold_cyphertxt[7] = 0x76;
gold_cyphertxt[8] = 0x36;
gold_cyphertxt[9] = 0xf6;
gold_cyphertxt[10] = 0x46;
gold_cyphertxt[11] = 0xb7;
gold_cyphertxt[12] = 0x2d;
gold_cyphertxt[13] = 0xaa;
gold_cyphertxt[14] = 0xbb;
gold_cyphertxt[15] = 0xe7;
 aes( gold_plaintxt, gold_key, test_cyphertxt );
        
        for( int j=0; j<NUM_DATA_BYTES; j++ ) {
            if (gold_cyphertxt[j] != test_cyphertxt[j]) {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "FAIL: COUNT = 14 Output DOES NOT match the golden output\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
                return 1;
            } else {
                fprintf(stdout, "*******************************************\n");
                fprintf(stdout, "Test Cypher %d: %02x\n", j, test_cyphertxt[j]);
                fprintf(stdout, "Gold Cypher %d: %02x\n", j, gold_cyphertxt[j]);
                fprintf(stdout, "*******************************************\n");
            }
        }
    
    fprintf(stdout, "*******************************************\n");
    fprintf(stdout, "PASS: The output matches the golden output!\n");
    fprintf(stdout, "*******************************************\n");
    }
